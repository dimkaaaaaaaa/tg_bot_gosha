import os
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from datetime import datetime
from database import get_user_city, save_user_city
import currentTime, currentWeather, tasks
import sqlite3

TOKEN = "7986596049:AAFtX6g_Q4iu9GBtG31giIONkUPd9oHmcYI"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global user_cities
    query = update.callback_query
    user_id = update.message.from_user.id
    text = update.message.text
    keyboard = [
            [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏", callback_data="tasks")],
            [InlineKeyboardButton("–ü–æ–≥–æ–¥–∞ –≤ –º–æ–µ–º –≥–æ—Ä–æ–¥–µ", callback_data="weather")],
            [InlineKeyboardButton("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è", callback_data="time")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="change_city")]
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã "–ü—Ä–∏–≤–µ—Ç", "–ô–æ—É", "–°—Ç–∞—Ä—Ç" –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
    if text.lower() in ["–π–æ—É", "—á—É–≤–∞–∫", "–≤–∞—Å–∞–ø", "–≥–æ—à–∞", "–ø—Ä–∏–≤–µ—Ç", "—Å—Ç–∞—Ä—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–∑–¥–∞—Ä–æ–≤–∞", "–ø—Ä–∏–≤–µ—Ç–∏–∫", "—Ö–∞–π", "–∑–¥–∞—Ä–æ–≤–∞", "hello", "hi", "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", "–∑–¥–æ—Ä–æ–≤–æ", "–≥–æ—à–∞–∞", "–≥–æ—à–∞–∞–∞", "–≥–µ–æ—Ä–≥–∏–π", "–≥—Ä–∏–≥–æ—Ä–∏–π", "—Ç—ã", "—Ç"]:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=reply_markup
        )
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—å –ª–∏—à–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –ï—Å–ª–∏ –Ω–µ "–ü—Ä–∏–≤–µ—Ç", –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    if text.lower() in ["—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è", "–≤—Ä–µ–º—è", "time", "–≤—Ä–µ–º", "–≤—Ä–µ–º—è—è", "–≤—Ä–µ–º—Å", "–≤—Ä–∞–º—Å", "–≤—Ä–µ–º—É", "–≤—Ä–µ–º–µ–Ω–∏", "–≤—Ä–µ–º–µ", "–≤—Ä"]:
        city = get_user_city(user_id) or "Moscow"
        current_time = currentTime.get_current_time(city)
        await update.message.reply_text(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ {city}: {current_time}")
    elif text.lower() in ["–ø–æ–≥–æ–¥–∞ –≤ –º–æ–µ–º –≥–æ—Ä–æ–¥–µ", "–ø–æ–≥–æ–¥–∞", "–ø–æ–≥–æ–¥", "–ø–æ–≥", "–ø–≥", "–ø–æ–≥–∞–¥", "–ø–∞–≥–æ–¥", "–ø–æ–≥–æ–¥—ã", "–ø–æ–≥–æ–¥–µ", "–ø–æ–≥–æ–¥—É"]:
        city = get_user_city(user_id) or "Moscow"
        weather = currentWeather.get_weather(city)
        await update.message.reply_text(weather)
    elif text.lower() in ["–∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", "–ø–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥", "–≥–æ—Ä–æ–¥", "–≥—Ä"]:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")
        context.user_data["awaiting_city"] = True
    elif context.user_data.get("awaiting_city"):
        save_user_city(user_id, text)
        context.user_data["awaiting_city"] = False
        await update.message.reply_text(f"–í–∞—à –≥–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {text}.")
    elif text.lower() in ['–∑–∞–¥–∞—á–∞', '–∑–∞–¥–∞—á–∏', '–ª–∏—Å—Ç']:
        await tasks.list_tasks(update, context)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.", reply_markup=reply_markup)




# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏d
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    query: CallbackQuery = update.callback_query
    await query.answer()

    user_id = update.callback_query.from_user.id
    callback_data = query.data

    if data.startswith("view_"):
        task_id = int(data.split("_")[1])
        task = tasks.get_task(task_id)
        if task:
            task_name, description, priority = task
            keyboard = [
                [InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"done_{task_id}")],
                [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task_id}")],
                [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data=f"change_priority_{task_id}")],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_list")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(f"–ó–∞–¥–∞—á–∞: {task_name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}", reply_markup=reply_markup)

    elif data.startswith("done_"):
        task_id = int(data.split("_")[1])
        tasks.mark_task_done(task_id)
        await query.answer("–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
        await query.message.reply_text("üéâ")

    elif data.startswith("delete_"):
        task_id = int(data.split("_")[1])
        tasks.delete_task(task_id)
        await query.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")
    
    elif data.startswith("change_priority_"):
        query = update.callback_query
        await query.answer()
        task_id = int(query.data.split('_')[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        keyboard = [
            [InlineKeyboardButton("–í—ã—Å–æ–∫–∏–π üü•", callback_data=f"set_priority_–≤—ã—Å–æ–∫–∏–π_{task_id}")],
            [InlineKeyboardButton("–û–±—ã—á–Ω—ã–π üü®", callback_data=f"set_priority_–æ–±—ã—á–Ω—ã–π_{task_id}")],
            [InlineKeyboardButton("–ù–∏–∑–∫–∏–π üü¶", callback_data=f"set_priority_–Ω–∏–∑–∫–∏–π_{task_id}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"back_to_list")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏:",
            reply_markup=reply_markup
        )

    elif data.startswith("set_priority_–Ω–∏–∑–∫–∏–π_"):
        query = update.callback_query
        await query.answer()

        task_id = int(query.data.split('_')[3])  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏
        new_priority = query.data.split('_')[2].capitalize()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect("tasks.db")
        cursor = conn.cursor()
        cursor.execute("UPDATE tasks SET priority = ? WHERE id = ?", (new_priority, task_id))
        conn.commit()
        conn.close()

        await query.edit_message_text(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_priority}.")
    elif data.startswith("set_priority_–æ–±—ã—á–Ω—ã–π_"):
        query = update.callback_query
        await query.answer()

        task_id = int(query.data.split('_')[3])  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏
        new_priority = query.data.split('_')[2].capitalize()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect("tasks.db")
        cursor = conn.cursor()
        cursor.execute("UPDATE tasks SET priority = ? WHERE id = ?", (new_priority, task_id))
        conn.commit()
        conn.close()

        await query.edit_message_text(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_priority}.")
    elif data.startswith("set_priority_–≤—ã—Å–æ–∫–∏–π_"):
        query = update.callback_query
        await query.answer()

        task_id = int(query.data.split('_')[3])  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏
        new_priority = query.data.split('_')[2].capitalize()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect("tasks.db")
        cursor = conn.cursor()
        cursor.execute("UPDATE tasks SET priority = ? WHERE id = ?", (new_priority, task_id))
        conn.commit()
        conn.close()

        await query.edit_message_text(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_priority}.")

    elif data == "back_to_list":
        await tasks.list_tasks(query, context)

    if callback_data == "time":
        city = get_user_city(user_id) or "Moscow"
        current_time = currentTime.get_current_time(city)
        await query.message.reply_text(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ {city}: {current_time}")
    elif callback_data == "weather":
        city = get_user_city(user_id) or "Moscow"
        weather = currentWeather.get_weather(city)
        await query.message.reply_text(weather)
    elif callback_data == "change_city":
        await query.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")
        context.user_data["awaiting_city"] = True
    elif callback_data == "tasks":
        await query.message.reply_text("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add –ù–∞–∑–≤–∞–Ω–∏–µ –ó–∞–¥–∞—á–∏ - –û–ø–∏—Å–∞–Ω–∏–µ")
        await tasks.list_tasks(query, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏", callback_data="tasks")],
        [InlineKeyboardButton("–ü–æ–≥–æ–¥–∞ –≤ –º–æ–µ–º –≥–æ—Ä–æ–¥–µ", callback_data="weather")],
        [InlineKeyboardButton("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è", callback_data="time")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="change_city")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    tasks.init_db()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    application = ApplicationBuilder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))  # –ö–æ–º–∞–Ω–¥–∞ /start
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_callback))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ Inline

    application.add_handler(CommandHandler("add", tasks.add))
    application.add_handler(CommandHandler("list", tasks.list_tasks))

    application.run_polling()

if __name__ == "__main__":
    main()