import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("tasks.db")
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        task TEXT,
        description TEXT,
        is_done BOOLEAN DEFAULT 0,
        priority TEXT DEFAULT '–ù–∏–∑–∫–∏–π'
    )
    """)
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
def add_task(user_id, task, description, priority="–ù–∏–∑–∫–∏–π"):
    conn = sqlite3.connect("tasks.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO tasks (user_id, task, description, priority) VALUES (?, ?, ?, ?)", (user_id, task, description, priority))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_tasks(user_id):
    conn = sqlite3.connect("tasks.db")
    cursor = conn.cursor()
    cursor.execute("""
    SELECT id, task, priority FROM tasks WHERE user_id = ? AND is_done = 0
    ORDER BY
        CASE priority
            WHEN '–í—ã—Å–æ–∫–∏–π' THEN 1
            WHEN '–û–±—ã—á–Ω—ã–π' THEN 2
            WHEN '–ù–∏–∑–∫–∏–π' THEN 3
        END
    """, (user_id,))
    tasks = cursor.fetchall()
    conn.close()
    return tasks

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID
def get_task(task_id):
    conn = sqlite3.connect("tasks.db")
    cursor = conn.cursor()
    cursor.execute("SELECT task, description, priority FROM tasks WHERE id = ?", (task_id,))
    task = cursor.fetchone()
    conn.close()
    return task

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
def delete_task(task_id):
    conn = sqlite3.connect("tasks.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM tasks WHERE id = ?", (task_id,))
    conn.commit()
    conn.close()

# –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
def mark_task_done(task_id):
    conn = sqlite3.connect("tasks.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE tasks SET is_done = 1 WHERE id = ?", (task_id,))
    conn.commit()
    conn.close()

    # –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    if update.message:
        user_id = update.message.chat_id
    elif query:
        user_id = query.message.chat_id
    else:
        return

    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add –ù–∞–∑–≤–∞–Ω–∏–µ –ó–∞–¥–∞—á–∏ - –û–ø–∏—Å–∞–Ω–∏–µ. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–ù–∏–∑–∫–∏–π'.")
        return
    task = args[0]
    description = " ".join(args[1:])
    priority = args[-1].capitalize() if len(args) > 2 else '–ù–∏–∑–∫–∏–π'
    add_task(user_id, task, description)
    await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}")
    await list_tasks(update, context)

# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    tasks_i = get_tasks(user_id)
    if not tasks_i:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
        return

    priority_emoji = {
        '–ù–∏–∑–∫–∏–π': "üü¶",  # –ì–æ–ª—É–±–æ–π –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        '–û–±—ã—á–Ω—ã–π': "üü®",  # –ñ–µ–ª—Ç—ã–π –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ
        '–í—ã—Å–æ–∫–∏–π': "üü•",  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ
    }

    keyboard = []
    for task_id, task, priority in tasks_i:
        emoji = priority_emoji.get(priority, "üü®")  # –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∂–µ–ª—Ç—ã–π
        task_text = f"{task} ({priority} {emoji})"  # –ó–∞–¥–∞—á–∞ —Å —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        keyboard.append([InlineKeyboardButton(task_text, callback_data=f"view_{task_id}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=reply_markup)
